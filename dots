#!/bin/env bash
# MIT License
#
# Copyright (c) 2024 Thales Maciel contato@thalesmaciel.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

set -euo pipefail

script_name=$(basename "$0")
script_dir=$(dirname "$(readlink -f "$0")")
include_file="$script_dir/dots.conf"

ensure_rsync() {
    if ! command -v rsync &> /dev/null; then
        echo "Error: rsync not found. Please install it and try again"
        exit 1
    fi
}

pull_dotfiles() {
    local dry_run=$1
    ensure_rsync && rsync -v \
        --include-from="$include_file" \
        --exclude '*' \
        --filter 'P .git/' \
        --filter 'P README.md' \
        --filter 'P dots.conf' \
        --filter "P $script_name" \
        --inplace \
        --recursive \
        --mkpath \
        --acls \
        --times \
        --human-readable \
        --executability \
        --delete-excluded \
        $dry_run \
        "$HOME/" ./
}

push_dotfiles() {
    local dry_run=$1
    ensure_rsync && rsync -v \
        --include-from="$include_file" \
        --exclude '*' \
        --exclude '.git/' \
        --exclude 'README.md' \
        --exclude 'dots.conf' \
        --exclude "$script_name" \
        --recursive \
        --mkpath \
        --acls \
        --times \
        --human-readable \
        --executability \
        $dry_run \
        ./ "$HOME"
}

display_help() {
    cat <<EOF >&2
Usage: $(basename "$0") [OPTION]

Options:
  help, -h, --help  Display this help message
  in                Pull dotfiles from \$HOME to the current directory
  out               Push dotfiles from the current directory to \$HOME

EOF
}

main() {
    [[ -z "$@" ]] && display_help && exit 1

    local dry_run=""
    if [[ "${2:-}" == "-d" || "${2:-}" == "--dry" || "${2:-}" == "--dry-run" ]]; then
        dry_run="--dry-run"
    fi

    case "$1" in
        help|-h|--help)
            display_help
            ;;
        in)
            pull_dotfiles "$dry_run"
            ;;
        out)
            push_dotfiles "$dry_run"
            ;;
        *)
            display_help
            exit 1
            ;;
    esac
}

main "$@"
